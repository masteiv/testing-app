{
    "env": {
        "browser": true,
        "es2021": true
    },
    "root": true,
    "extends": [
        "plugin:react/recommended",
        "standard-with-typescript",
        "prettier"
    ],
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": ["./tsconfig.json"]
    },
    "plugins": [
        "react",
        "react-hooks",
        "prettier",
        "unused-imports",
        "simple-import-sort"
    ],
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "rules": {
        "semi": ["error", "always"],
        "quotes": ["error", "single"],
        "prettier/prettier": ["error"],
        "jsx-quotes": ["error", "prefer-double"],
        "react/react-in-jsx-scope": "off",
        "unused-imports/no-unused-imports": "error",
        "typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-dynamic-delete": "off",
        "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
        "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
        "react/jsx-curly-brace-presence": [
            "error",
            { "props": "never", "children": "never" }
        ],
        "@typescript-eslint/prefer-nullish-coalescing": "off",
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-invalid-void-type": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "simple-import-sort/imports": [
            "error",
            {
                "groups": [
                    // Packages `react` related packages come first.
                    ["^react", "^@?\\w"],
                    // Internal packages.
                    ["^(@|components)(/.*|$)"],
                    // Side effect imports.
                    ["^\\u0000"],
                    // Parent imports. Put `..` last.
                    ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
                    // Other relative imports. Put same-folder imports and `.` last.
                    ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
                    // Style imports.
                    ["^.+\\.?(css)$"]
                ]
            }
        ]
    }
}